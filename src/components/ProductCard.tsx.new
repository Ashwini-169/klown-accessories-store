import React, { useState, useMemo, useCallback } from 'react';
import { ShoppingCart, Star } from 'lucide-react';
import { Product } from '../types';
import { useCart } from '../context/CartContext';
import { productSyncUtils } from '../utils/productSyncUtils';
import LoadingIcon from './LoadingIcon';
import ProductEnlargeModal from './ProductEnlargeModal';

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const [selectedSize, setSelectedSize] = useState<string>(product?.sizes ? Object.keys(product.sizes)[0] : '');
  const [isHovered, setIsHovered] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);
  const [imageError, setImageError] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const { addToCart } = useCart();

  // Memoize derived size/stock info to avoid recalculations on every render
  const availableSizes = useMemo(() => {
    return product?.sizes ? Object.entries(product.sizes).filter(([_, sizeInfo]) => sizeInfo.available) : [];
  }, [product]);

  const currentStock = useMemo(() => {
    return product?.sizes && selectedSize ? product.sizes[selectedSize]?.stock || 0 : 0;
  }, [product, selectedSize]);

  const isOutOfStock = currentStock === 0;

  const handleAddToCart = useCallback(() => {
    if (!isOutOfStock) {
      addToCart({
        productId: product.id,
        size: selectedSize,
        quantity: 1,
        price: product.price
      });
    }
  }, [addToCart, isOutOfStock, product.id, selectedSize, product.price]);

  // Check if the device is mobile
  const [isMobile, setIsMobile] = useState(false);
  
  // Update mobile status on mount and resize
  React.useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    // Initial check
    checkIsMobile();
    
    // Add listener for window resize
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);
  
  // Listen for real-time stock updates
  React.useEffect(() => {
    const handleStockUpdated = (event: any) => {
      const { productId, size, newStock } = event.detail;
      
      // Only update if this is our product
      if (productId === product.id && size === selectedSize) {
        console.log(`ProductCard: Stock for ${product.name} (${size}) updated to ${newStock}`);
        
        // Force a re-render by creating a "clone" event - React will detect the change
        const productUpdateEvent = new CustomEvent('productCardStockUpdate', {
          detail: { productId, size, newStock }
        });
        document.dispatchEvent(productUpdateEvent);
      }
    };
    
    document.addEventListener('productStockUpdated', handleStockUpdated);
    
    return () => {
      document.removeEventListener('productStockUpdated', handleStockUpdated);
    };
  }, [product.id, selectedSize]);

  return (
    <>
      {showModal && (
        <ProductEnlargeModal 
          product={product} 
          onClose={() => setShowModal(false)} 
        />
      )}
      
      <div 
        className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 group product-card"
        onMouseEnter={() => !isMobile && setIsHovered(true)}
        onMouseLeave={() => !isMobile && setIsHovered(false)}
        onTouchStart={() => isMobile && setIsHovered(true)}
        onTouchEnd={() => isMobile && setTimeout(() => setIsHovered(false), 500)}
      >
        <div className="relative aspect-square overflow-hidden bg-gray-100">
          {(imageLoading || imageError) && (
            <div className="absolute inset-0 flex items-center justify-center">
              <LoadingIcon category={product.category} className="w-16 h-16 text-gray-400" />
            </div>
          )}
          <img
            src={isHovered && product.images[1] ? product.images[1] : product.images[0]}
            alt={product.name}
            className={`w-full h-full object-cover transition-all duration-500 group-hover:scale-110 ${
              imageLoading || imageError ? 'opacity-0' : 'opacity-100'
            }`}
            onLoad={() => {
              setImageLoading(false);
              setImageError(false);
            }}
            onError={() => {
              setImageLoading(false);
              setImageError(true);
            }}
          />
          
          {product.featured && (
            <div className="absolute top-3 left-3 bg-yellow-400 text-black px-2 py-1 rounded-full text-xs font-bold">
              FEATURED
            </div>
          )}
          
          {product.discount > 0 && (
            <div className="absolute top-3 right-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
              {product.discount}% OFF
            </div>
          )}
          
          {currentStock <= 5 && currentStock > 0 && (
            <div className="absolute bottom-3 left-3 bg-orange-500 text-white px-2 py-1 rounded-full text-xs font-medium">
              Only {currentStock} left!
            </div>
          )}
        </div>
        
        <div className={`${isMobile ? 'p-3' : 'p-6'}`}>
          <h3 
            className={`${isMobile ? 'text-base' : 'text-xl'} font-bold text-gray-900 mb-2 product-title cursor-pointer hover:text-yellow-600`}
            onClick={() => setShowModal(true)}
          >
            {product.name}
          </h3>
          <p 
            className={`text-gray-600 ${isMobile ? 'text-xs' : 'text-sm'} mb-4 line-clamp-2 cursor-pointer hover:text-gray-900`}
            onClick={() => setShowModal(true)}
          >
            {product.description}
          </p>
          
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <span className={`${isMobile ? 'text-lg' : 'text-2xl'} font-bold text-gray-900 product-price`}>₹{product.price}</span>
              {product.originalPrice > product.price && (
                <span className={`${isMobile ? 'text-sm' : 'text-lg'} text-gray-500 line-through`}>₹{product.originalPrice}</span>
              )}
            </div>
            <div className="flex items-center">
              {product.rating ? (
                <>
                  <div className="flex mr-1">
                    {[1, 2, 3, 4, 5].map((star) => {
                      const rating = product.rating?.average || 0;
                      return (
                        <Star 
                          key={star}
                          className={`h-3 w-3 ${
                            star <= Math.floor(rating)
                              ? "text-yellow-400 fill-yellow-400" 
                              : star <= rating + 0.5 
                                ? "text-yellow-400 fill-yellow-200"  // Half star
                                : "text-gray-300"
                          }`}
                        />
                      );
                    })}
                  </div>
                  <span className="text-xs text-gray-600">
                    {product.rating.average.toFixed(1)} ({product.rating.count})
                  </span>
                </>
              ) : (
                <span className="text-xs text-gray-600">No ratings</span>
              )}
            </div>
          </div>        
          
          <div className="mb-4">
            <label className={`block ${isMobile ? 'text-xs' : 'text-sm'} font-medium text-gray-700 mb-1 sm:mb-2`}>Size:</label>
            <select
              value={selectedSize}
              onChange={(e) => setSelectedSize(e.target.value)}
              className={`w-full ${isMobile ? 'p-1.5 text-sm' : 'p-2'} border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-transparent`}
            >
              {availableSizes.map(([size]) => (
                <option key={size} value={size}>
                  {size}
                </option>
              ))}
            </select>
          </div>
          
          <button
            onClick={handleAddToCart}
            disabled={isOutOfStock || availableSizes.length === 0}
            className={`w-full flex items-center justify-center space-x-2 ${isMobile ? 'py-2 text-sm' : 'py-3'} px-4 rounded-lg font-semibold transition-all ${
              isOutOfStock || availableSizes.length === 0
                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                : 'bg-gradient-to-r from-yellow-400 to-orange-500 text-black hover:from-yellow-300 hover:to-orange-400 transform hover:scale-105 shadow-lg'
            }`}
          >
            <ShoppingCart className={`${isMobile ? 'h-4 w-4' : 'h-5 w-5'}`} />
            <span>{isOutOfStock ? 'Out of Stock' : 'Add to Cart'}</span>
          </button>
        </div>
      </div>
    </>
  );
};

export default React.memo(ProductCard);
