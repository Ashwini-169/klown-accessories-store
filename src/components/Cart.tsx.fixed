import React, { useState, useEffect } from 'react';
import { X, Plus, Minus, ShoppingBag, Tag, Copy, Check, Gift, ArrowRight, ChevronLeft } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { useProducts } from '../context/ProductContext';
import Checkout from './Checkout';
import Bill from './Bill';
import type { Coupon } from '../types';
import { getRecommendedCoupons } from '../utils/couponUtils';

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
}

const Cart: React.FC<CartProps> = ({ isOpen, onClose }) => {
  // Step management: 0 = Cart, 1 = Bill Summary, 2 = Checkout
  const [currentStep, setCurrentStep] = useState<number>(0);
  // coupons now sourced from ProductContext; no local fetch needed
  const [recommendedCoupons, setRecommendedCoupons] = useState<Coupon[]>([]);
  const [selectedCoupon, setSelectedCoupon] = useState<Coupon | null>(null);
  const [copiedCode, setCopiedCode] = useState<string | null>(null);
  const [showBillPrompt, setShowBillPrompt] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  
  // Check if device is mobile
  useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    // Initial check
    checkIsMobile();
    
    // Add listener for window resize
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);
  
  const { items, removeFromCart, updateQuantity, getTotalPrice, clearCart, getTotalItems } = useCart();
  const { allCoupons } = useProducts();

  // Handle copy coupon code to clipboard
  const handleCopyCode = (code: string) => {
    navigator.clipboard.writeText(code).then(() => {
      setCopiedCode(code);
      setTimeout(() => setCopiedCode(null), 3000);
    });
  };

  // Get recommended coupons for the cart
  useEffect(() => {
    if (allCoupons && items.length > 0) {
      const totalPrice = getTotalPrice();
      const recommended = getRecommendedCoupons(allCoupons, items, totalPrice);
      setRecommendedCoupons(recommended);
    } else {
      setRecommendedCoupons([]);
    }
  }, [allCoupons, items, getTotalPrice]);

  // Handle adding items to cart and showing bill prompt
  useEffect(() => {
    if (items.length > 0) {
      setShowBillPrompt(true);
      
      const timer = setTimeout(() => {
        setShowBillPrompt(false);
      }, 8000);
      
      return () => clearTimeout(timer);
    }
  }, [items.length]);

  // Calculate coupon savings
  const calculateSavings = (coupon: Coupon, totalPrice: number) => {
    let savings = 0;
    
    if (coupon.type === 'percentage') {
      savings = (totalPrice * (coupon.value / 100));
    } else if (coupon.type === 'fixed') {
      savings = coupon.value;
    } else if (coupon.type === 'special') {
      // Special coupons might have different logic
      if (coupon.code === 'FREESHIPPING') {
        savings = 99; // Example shipping cost
      } else {
        savings = coupon.value || 0;
      }
    }
    
    return savings;
  };

  // Handle cart closing - reset steps
  useEffect(() => {
    if (!isOpen) {
      setCurrentStep(0);
    }
  }, [isOpen]);

  // If not open, don't render anything
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-gray-900 bg-opacity-50 overflow-y-auto h-full w-full flex justify-end">
      {currentStep === 0 && (
        <div className={`absolute ${isMobile ? 'inset-0' : 'right-0 top-0 h-full w-full max-w-md'} bg-white shadow-xl`}>
          <div className="flex flex-col h-full">
            <div className={`flex items-center justify-between ${isMobile ? 'p-3' : 'p-4'} border-b sticky top-0 z-10 bg-white`}>
              <div className="flex items-center">
                <ShoppingBag className={`${isMobile ? 'h-5 w-5' : 'h-6 w-6'} mr-2`} />
                <h2 className={`${isMobile ? 'text-lg' : 'text-xl'} font-bold text-gray-900`}>
                  Shopping Cart {getTotalItems() > 0 && <span className="text-sm font-normal text-gray-500">({getTotalItems()} {getTotalItems() === 1 ? 'item' : 'items'})</span>}
                </h2>
              </div>
              <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-full">
                <X className="h-5 w-5" />
              </button>
            </div>
            
            {getTotalItems() === 0 ? (
              <div className="flex flex-col items-center justify-center flex-1 p-4">
                <ShoppingBag className="h-16 w-16 text-gray-300 mb-4" />
                <p className="text-gray-500 mb-6">Your cart is empty</p>
                <button 
                  onClick={onClose}
                  className="px-6 py-2 bg-yellow-400 hover:bg-yellow-500 text-black rounded-md font-medium transition-all"
                >
                  Continue Shopping
                </button>
              </div>
            ) : (
              <>
                <div className="flex-1 overflow-y-auto">
                  <div className={`${isMobile ? 'p-3' : 'p-4'}`}>
                    {items.map((item) => {
                      return (
                        <div key={`${item.productId}-${item.size}`} className="flex mb-4 border-b pb-4">
                          <div className="flex-shrink-0 w-20 h-20 rounded-md overflow-hidden">
                            <img src={item.image} alt={item.name} className="w-full h-full object-cover" />
                          </div>
                          <div className="ml-3 flex-1">
                            <div className="flex justify-between items-start">
                              <div>
                                <h3 className="text-sm font-medium text-gray-900 line-clamp-1">{item.name}</h3>
                                <p className="text-xs text-gray-500">
                                  Size: {item.size} | Color: {item.color || "Default"}
                                </p>
                              </div>
                              <div className="flex items-center ml-4">
                                <p className="font-medium text-gray-900">
                                  ₹{item.price.toFixed(0)}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center justify-between mt-2">
                              <div className="flex items-center border rounded px-1">
                                <button
                                  disabled={item.quantity <= 1}
                                  onClick={() => updateQuantity(item.productId, item.size, Math.max(1, item.quantity - 1))}
                                  className={`px-1.5 py-0.5 ${item.quantity <= 1 ? 'text-gray-300' : 'hover:bg-gray-100 text-gray-500'}`}
                                >
                                  <Minus className="h-3 w-3" />
                                </button>
                                <span className="text-xs px-2 py-0.5 font-medium min-w-[20px] text-center">
                                  {item.quantity}
                                </span>
                                <button
                                  onClick={() => updateQuantity(item.productId, item.size, item.quantity + 1)}
                                  className="px-1.5 py-0.5 hover:bg-gray-100 text-gray-500"
                                >
                                  <Plus className="h-3 w-3" />
                                </button>
                              </div>
                              <button
                                onClick={() => removeFromCart(item.productId, item.size)}
                                className="p-1 text-red-500 hover:bg-red-50 rounded"
                              >
                                <X className="h-3.5 w-3.5" />
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>

                  {showBillPrompt && (
                    <div className="mt-4 mb-3 bg-yellow-50 border border-yellow-200 rounded-lg p-3 shadow-sm">
                      <h3 className="text-sm font-semibold text-gray-800 mb-1">Item added to cart!</h3>
                      <p className="text-xs text-gray-600 mb-2">Would you like to view your order summary?</p>
                      <div className="flex justify-between items-center">
                        <button
                          onClick={() => setShowBillPrompt(false)}
                          className="text-xs text-gray-500 hover:text-gray-700"
                        >
                          Not now
                        </button>
                        <button
                          onClick={() => {
                            setShowBillPrompt(false);
                            setCurrentStep(1); // Move to bill summary
                          }}
                          className="text-xs bg-yellow-400 hover:bg-yellow-500 text-black px-3 py-1.5 rounded-md"
                        >
                          View Summary
                        </button>
                      </div>
                    </div>
                  )}

                  {getTotalPrice() >= 1000 && (
                    <div className="mt-4 flex items-center justify-center bg-green-50 p-2 rounded-md text-xs text-green-700">
                      <Gift className="h-3.5 w-3.5 mr-1.5 text-green-500" />
                      You qualify for a free mystery gift with your order!
                    </div>
                  )}

                  {/* Recommended Coupons (moved from Bill Summary modal to Cart) */}
                  {recommendedCoupons.length > 0 && (
                    <div className="mt-5 bg-gray-50 p-3 rounded-lg">
                      {/* Admin Coupons */}
                      {recommendedCoupons.some(c => c.id && typeof c.id === 'string' && c.id.startsWith('ADMIN')) && (
                        <div className="mb-3">
                          <div className="flex items-center mb-2">
                            <Tag className="h-4 w-4 text-purple-500 mr-2" />
                            <h3 className="text-sm font-semibold text-purple-700">Admin Special Offers</h3>
                          </div>
                          <ul className="space-y-2">
                            {recommendedCoupons
                              .filter(coupon => coupon.id && typeof coupon.id === 'string' && coupon.id.startsWith('ADMIN'))
                              .slice(0, 2)
                              .map((coupon) => {
                                const totalPrice = getTotalPrice();
                                const savings = calculateSavings(coupon, totalPrice);
                                return (
                                  <li key={coupon.id} className="text-xs sm:text-sm p-2 border border-dashed rounded border-purple-300 bg-purple-50">
                                    <div className="flex flex-wrap items-center justify-between">
                                      <div className="flex items-center mb-1 w-full">
                                        <span className="mr-1" role="img" aria-label="coupon icon">🎭</span>
                                        <div className="font-medium truncate max-w-[70%]">{coupon.code}</div>
                                        <div className="flex ml-auto">
                                          <button onClick={() => setSelectedCoupon(coupon)} className="mr-1 px-2 py-0.5 bg-blue-500 hover:bg-blue-600 text-white rounded-sm text-xs">Apply</button>
                                          <button onClick={() => handleCopyCode(coupon.code)} className="px-2 py-0.5 bg-yellow-100 hover:bg-yellow-200 text-yellow-800 rounded-sm text-xs flex items-center">
                                            {copiedCode === coupon.code ? (<><Check className="h-3 w-3 mr-1" />OK</>) : (<><Copy className="h-3 w-3 mr-1" />Copy</>)}
                                          </button>
                                        </div>
                                      </div>
                                      <div className="w-full">
                                        <p className="text-xs text-gray-600 truncate">{coupon.description}</p>
                                        {savings > 0 && (
                                          <p className="text-xs text-purple-600 font-medium">Save ₹{savings.toFixed(0)}</p>
                                        )}
                                      </div>
                                    </div>
                                  </li>
                                );
                              })}
                          </ul>
                        </div>
                      )}
                      {/* System Recommended Coupons */}
                      <div className="flex items-center mb-2">
                        <Tag className="h-4 w-4 text-yellow-500 mr-2" />
                        <h3 className="text-sm font-semibold text-gray-700">Recommended Offers</h3>
                      </div>
                      <ul className="space-y-2">
                        {recommendedCoupons
                          .filter(coupon => !(coupon.id && typeof coupon.id === 'string' && coupon.id.startsWith('ADMIN')))
                          .slice(0, 3)
                          .map((coupon) => {
                            const totalPrice = getTotalPrice();
                            const savings = calculateSavings(coupon, totalPrice);
                            const isBestDeal = recommendedCoupons.filter(c => !(c.id && typeof c.id === 'string' && c.id.startsWith('ADMIN')))[0]?.id === coupon.id;
                            return (
                              <li key={coupon.id} className={`text-xs sm:text-sm p-2 border border-dashed rounded ${isBestDeal ? 'border-green-300 bg-green-50' : 'border-yellow-300 bg-yellow-50'}`}>
                                <div className="flex flex-wrap items-center justify-between">
                                  <div className="flex items-center mb-1 w-full">
                                    <span className="mr-1" role="img" aria-label="coupon icon">
                                      {coupon.type === 'percentage' ? '💰' : coupon.type === 'fixed' ? '💵' : coupon.type === 'special' ? '🎁' : '🎉'}
                                    </span>
                                    <div className="font-medium truncate max-w-[70%]">
                                      {coupon.code}
                                      {isBestDeal && <span className="ml-1 text-green-600">(Best)</span>}
                                    </div>
                                    <div className="flex ml-auto">
                                      <button onClick={() => setSelectedCoupon(coupon)} className="mr-1 px-2 py-0.5 bg-blue-500 hover:bg-blue-600 text-white rounded-sm text-xs">Apply</button>
                                      <button onClick={() => handleCopyCode(coupon.code)} className="px-2 py-0.5 bg-yellow-100 hover:bg-yellow-200 text-yellow-800 rounded-sm text-xs flex items-center">
                                        {copiedCode === coupon.code ? (<><Check className="h-3 w-3 mr-1" />OK</>) : (<><Copy className="h-3 w-3 mr-1" />Copy</>)}
                                      </button>
                                    </div>
                                  </div>
                                  <div className="w-full">
                                    <p className="text-xs text-gray-600 truncate">{coupon.description}</p>
                                    {savings > 0 && (<p className="text-xs text-green-600 font-medium">Save ₹{savings.toFixed(0)}</p>)}
                                  </div>
                                </div>
                              </li>
                            );
                          })}
                      </ul>
                      {recommendedCoupons.length > 3 && (
                        <p className="text-xs text-gray-500 mt-2 text-center">+{recommendedCoupons.length - 3} more offers at checkout</p>
                      )}
                    </div>
                  )}
                </div>

                <div className={`${isMobile ? 'p-3' : 'p-4'} border-t ${isMobile ? 'sticky bottom-0 bg-white' : ''}`}>
                  <div className="flex justify-between items-center mb-3">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Subtotal</p>
                      <p className={`${isMobile ? 'text-lg' : 'text-xl'} font-bold text-gray-900`}>₹{getTotalPrice().toFixed(0)}</p>
                    </div>
                    <button
                      onClick={clearCart}
                      className="text-xs text-red-500 hover:text-red-700 underline"
                    >
                      Clear Cart
                    </button>
                  </div>

                  <button
                    onClick={() => setCurrentStep(1)}
                    className={`w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black ${isMobile ? 'py-2.5 text-sm' : 'py-3'} rounded-md font-medium hover:from-yellow-300 hover:to-orange-400 transition-all flex items-center justify-center`}
                  >
                    View Order Summary <ArrowRight className={`ml-2 ${isMobile ? 'h-3.5 w-3.5' : 'h-4 w-4'}`} />
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
      
      {/* Step 2: Bill Summary Modal */}
      {currentStep === 1 && (
        <div className={`absolute ${isMobile ? 'inset-0' : 'right-0 top-0 h-full w-full max-w-md'} bg-white shadow-xl overflow-y-auto`}>
          <div className="flex flex-col h-full">
            <div className={`flex items-center justify-between ${isMobile ? 'p-3' : 'p-4'} border-b sticky top-0 z-10 bg-white`}>
              <div className="flex items-center">
                <button 
                  onClick={() => setCurrentStep(0)} 
                  className={`${isMobile ? 'mr-1 p-1' : 'mr-2 p-1.5'} ${isMobile ? '' : 'bg-gray-100 rounded-full hover:bg-gray-200'}`}
                >
                  <ChevronLeft className="h-5 w-5" />
                </button>
                <h2 className={`${isMobile ? 'text-lg' : 'text-xl'} font-bold text-gray-900`}>Order Summary</h2>
              </div>
              {!isMobile && (
                <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-full">
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
            
            <div className={`flex-1 overflow-y-auto ${isMobile ? 'p-3' : 'p-4'}`}>
              {/* Bill component */}
              <Bill 
                selectedCoupon={selectedCoupon} 
                onSelectCoupon={setSelectedCoupon} 
                recommendedCoupons={recommendedCoupons} 
              />
            
              <div className={`${isMobile ? 'p-3 sticky bottom-0 bg-white' : 'p-4'} border-t`}>
                <button
                  onClick={() => setCurrentStep(2)}
                  className={`w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-black ${isMobile ? 'py-2.5 text-sm' : 'py-3'} rounded-md font-medium hover:from-yellow-300 hover:to-orange-400 transition-all flex items-center justify-center`}
                >
                  Proceed to Checkout <ArrowRight className={`ml-2 ${isMobile ? 'h-3.5 w-3.5' : 'h-4 w-4'}`} />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Step 3: Checkout Form */}
      {currentStep === 2 && (
        <div className={`absolute ${isMobile ? 'inset-0' : 'right-0 top-0 h-full w-full max-w-md'} bg-white shadow-xl overflow-y-auto`}>
          <div className="flex flex-col h-full">
            <div className={`flex items-center justify-between ${isMobile ? 'p-3' : 'p-4'} border-b sticky top-0 z-10 bg-white`}>
              <div className="flex items-center">
                <button 
                  onClick={() => setCurrentStep(1)} 
                  className={`${isMobile ? 'mr-1 p-1' : 'mr-2 p-1.5'} ${isMobile ? '' : 'bg-gray-100 rounded-full hover:bg-gray-200'}`}
                >
                  <ChevronLeft className="h-5 w-5" />
                </button>
                <h2 className={`${isMobile ? 'text-lg' : 'text-xl'} font-bold text-gray-900`}>Checkout</h2>
              </div>
              {!isMobile && (
                <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-full">
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
            
            <div className="flex-1 overflow-y-auto">
              {/* Checkout Component */}
              <Checkout 
                selectedCoupon={selectedCoupon} 
                onCompleted={onClose}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;
