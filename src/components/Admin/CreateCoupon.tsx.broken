import React, { useState, useEffect, useCallback } from 'react';
import { useProducts } from '../../context/ProductContext';
import { Coupon } from '../../types';
import { Save, AlertTriangle, Check, RefreshCw, Copy, FileCode } from 'lucide-react';
import { couponSyncUtils } from '../../utils/couponSyncUtils';
import CouponFileService from '../../services/CouponFileService';

const CreateCoupon: React.FC = () => {
  const { coupons, updateCoupons } = useProducts();
  const [jsonContent, setJsonContent] = useState<string>('');
  const [isSaving, setIsSaving] = useState<boolean>(false);
  const [isJsonValid, setIsJsonValid] = useState<boolean>(true);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [successMessage, setSuccessMessage] = useState<string>('');
  const [hasChanges, setHasChanges] = useState<boolean>(false);

  // Initialize JSON editor with current coupons
  useEffect(() => {
    // Format the JSON with indentation for better readability
    const formattedJson = JSON.stringify(coupons, null, 2);
    setJsonContent(formattedJson);
    setHasChanges(false);
  }, [coupons]);

  // Validate JSON as user types
  const validateJson = (content: string) => {
    try {
      if (content.trim() === '') {
        setIsJsonValid(false);
        setErrorMessage('JSON cannot be empty');
        return false;
      }

      const parsed = JSON.parse(content);
      
      // Validate that it's an array
      if (!Array.isArray(parsed)) {
        setIsJsonValid(false);
        setErrorMessage('Coupons must be an array');
        return false;
      }
      
      // Validate required fields in each coupon
      const invalidCoupons = parsed.filter((coupon: any, index: number) => {
        if (!coupon.id || !coupon.code || !coupon.title) {
          setErrorMessage(`Coupon at index ${index} is missing required fields (id, code, title)`);
          return true;
        }
        return false;
      });
      
      if (invalidCoupons.length > 0) {
        setIsJsonValid(false);
        return false;
      }
      
      // Check for duplicate IDs or codes
      const ids = new Set<string>();
      const codes = new Set<string>();
      const duplicates = parsed.filter((coupon: any, index: number) => {
        if (ids.has(coupon.id)) {
          setErrorMessage(`Duplicate coupon ID found: ${coupon.id}`);
          return true;
        }
        
        if (codes.has(coupon.code)) {
          setErrorMessage(`Duplicate coupon code found: ${coupon.code}`);
          return true;
        }
        
        ids.add(coupon.id);
        codes.add(coupon.code);
        return false;
      });
      
      if (duplicates.length > 0) {
        setIsJsonValid(false);
        return false;
      }
      
      setIsJsonValid(true);
      setErrorMessage('');
      return true;
    } catch (error) {
      setIsJsonValid(false);
      setErrorMessage(`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`);
      return false;
    }
  };

  // Handle text changes in the editor
  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value;
    setJsonContent(newContent);
    setHasChanges(true);
    validateJson(newContent);
  };

  // Format JSON with proper indentation
  const formatJson = () => {
    try {
      const parsed = JSON.parse(jsonContent);
      const formatted = JSON.stringify(parsed, null, 2);
      setJsonContent(formatted);
      validateJson(formatted);
      setSuccessMessage('JSON formatted successfully');
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (error) {
      setErrorMessage(`Cannot format invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Save coupons to the file
  const saveCoupons = async () => {
    try {
      if (!isJsonValid) {
        alert('Cannot save invalid JSON. Please correct the errors first.');
        return;
      }
      
      // Confirm before saving
      const confirmed = window.confirm('Are you sure you want to save these changes to coupons.json? This will replace all existing coupons.');
      if (!confirmed) return;
      
      setIsSaving(true);
      setErrorMessage('');
      setSuccessMessage('');
      
      // Parse JSON and save
      const updatedCoupons = JSON.parse(jsonContent) as Coupon[];
      
      // Use the couponSyncUtils to save to file
      const success = await couponSyncUtils.syncCoupons(updatedCoupons);
      
      if (success) {
        // Update context state
        updateCoupons(updatedCoupons);
        setSuccessMessage('Coupons saved successfully to coupons.json');
        setHasChanges(false);
        
        // Notify other components about the update
        document.dispatchEvent(new CustomEvent('couponsUpdated', { 
          detail: { coupons: updatedCoupons } 
        }));
      } else {
        throw new Error('Failed to save coupons to file');
      }
    } catch (error) {
      console.error('Error saving coupons:', error);
      setErrorMessage(`Failed to save: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSaving(false);
    }
  };

  // Refresh coupons from file
  const refreshCoupons = async () => {
    try {
      // Confirm if there are unsaved changes
      if (hasChanges) {
        const confirmed = window.confirm('You have unsaved changes. Are you sure you want to refresh and lose these changes?');
        if (!confirmed) return;
      }
      
      setIsSaving(true);
      setErrorMessage('');
      
      // Fetch coupons from API
      const response = await fetch('http://localhost:3001/api/coupons');
      
      if (!response.ok) {
        throw new Error(`Failed to fetch coupons: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      
      if (result.success && Array.isArray(result.data)) {
        // Format and update the editor
        const formattedJson = JSON.stringify(result.data, null, 2);
        setJsonContent(formattedJson);
        validateJson(formattedJson);
        
        // Update context
        updateCoupons(result.data);
        setSuccessMessage('Coupons refreshed from file');
        setHasChanges(false);
      } else {
        throw new Error('Invalid response from API');
      }
    } catch (error) {
      console.error('Error refreshing coupons:', error);
      setErrorMessage(`Failed to refresh: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSaving(false);
    }
  };

  // Copy JSON to clipboard
  const copyToClipboard = () => {
    navigator.clipboard.writeText(jsonContent);
    setSuccessMessage('JSON copied to clipboard');
    setTimeout(() => setSuccessMessage(''), 3000);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Edit Coupons JSON</h2>
        <div className="flex gap-2">
          <button
            type="button"
            onClick={refreshCoupons}
            disabled={isSaving}
            className="flex items-center gap-1 px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md"
          >
            <RefreshCw size={16} />
            Refresh
          </button>
          <button
            type="button"
            onClick={formatJson}
            disabled={isSaving || !jsonContent}
            className="flex items-center gap-1 px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md"
          >
            <FileCode size={16} />
            Format JSON
          </button>
          <button
            type="button"
            onClick={copyToClipboard}
            disabled={isSaving || !jsonContent}
            className="flex items-center gap-1 px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md"
          >
            <Copy size={16} />
            Copy
          </button>
        </div>
      </div>

      {/* Status Messages */}
      {errorMessage && (
        <div className="mb-4 p-3 bg-red-100 text-red-800 rounded-md flex items-center gap-2">
          <AlertTriangle size={18} />
          <span>{errorMessage}</span>
        </div>
      )}
      
      {successMessage && (
        <div className="mb-4 p-3 bg-green-100 text-green-800 rounded-md flex items-center gap-2">
          <Check size={18} />
          <span>{successMessage}</span>
        </div>
      )}

      <div className="mb-6">
        <div className={`border-2 ${isJsonValid ? 'border-gray-300' : 'border-red-500'} rounded-lg relative`}>
          <textarea
            value={jsonContent}
            onChange={handleContentChange}
            className="font-mono text-sm w-full h-[500px] p-4 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none rounded-lg"
            spellCheck="false"
            data-gramm="false"
            placeholder="Loading coupons..."
          />
          {!isJsonValid && (
            <div className="absolute bottom-3 right-3 bg-red-100 text-red-800 px-3 py-1 rounded-full text-xs">
              Invalid JSON
            </div>
          )}
          {hasChanges && (
            <div className="absolute bottom-3 left-3 bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-xs">
              Unsaved Changes
            </div>
          )}
        </div>
        <p className="text-sm text-gray-500 mt-2">
          Edit the JSON directly. All changes will be saved to coupons.json.
        </p>
      </div>

      <div className="flex justify-end">
        <button
          onClick={saveCoupons}
          disabled={isSaving || !isJsonValid}
          className={`flex items-center gap-2 px-6 py-3 text-white rounded-md ${
            isJsonValid ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-400 cursor-not-allowed'
          }`}
        >
          {isSaving ? (
            <>
              <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
              <span>Saving...</span>
            </>
          ) : (
            <>
              <Save size={18} />
              <span>Save to coupons.json</span>
            </>
          )}
        </button>
      </div>
    </div>
  );
      
      if (success) {
        // Update context
        updateCoupons(updatedCoupons);
        
        if (isEditing) {
          couponSyncUtils.notifyCouponUpdated(formCoupon.id);
          alert(`Coupon "${formCoupon.title}" updated successfully!`);
        } else {
          couponSyncUtils.notifyCouponCreated(formCoupon);
          alert(`Coupon "${formCoupon.title}" created successfully!`);
        }
        
        resetForm(); // Reset form after successful save
      } else {
        throw new Error('Failed to save coupons');
      }
    } catch (error) {
      console.error('Error saving coupon:', error);
      alert('There was a problem saving the coupon. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  
  // Edit coupon
  const handleEditCoupon = (couponId: string) => {
    setSelectedCouponId(couponId);
    setIsEditing(true);
  };
  
  // Delete coupon
  const handleDeleteCoupon = async (couponId: string) => {
    const couponToDelete = coupons.find(c => c.id === couponId);
    if (!couponToDelete) return;
    
    const confirmDelete = window.confirm(
      `Are you sure you want to delete the coupon "${couponToDelete.title}"? This will remove it from coupons.json.`
    );
    
    if (!confirmDelete) return;
    
    setIsSaving(true);
    
    try {
      console.log(`Deleting coupon with ID: ${couponId}`);
      const updatedCoupons = coupons.filter(c => c.id !== couponId);
      console.log(`Coupons before: ${coupons.length}, after: ${updatedCoupons.length}`);
      
      // Update context first to ensure UI is responsive
      updateCoupons(updatedCoupons);
      
      // Use couponSyncUtils to sync with coupons.json
      const success = await couponSyncUtils.syncCoupons(updatedCoupons);
      
      if (success) {
        couponSyncUtils.notifyCouponDeleted(couponId);
        alert(`Coupon "${couponToDelete.title}" deleted successfully!`);
        
        if (selectedCouponId === couponId) {
          resetForm();
        }
      } else {
        console.error('Failed to sync coupons to file');
        throw new Error('Failed to delete coupon');
      }
    } catch (error) {
      console.error('Error deleting coupon:', error);
      // Show more detailed error information for debugging
      if (error instanceof Error) {
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);
      }
      alert('There was a problem deleting the coupon. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  
  // Toggle coupon active status
  const handleToggleActive = async (couponId: string) => {
    const couponToToggle = coupons.find(c => c.id === couponId);
    if (!couponToToggle) return;
    
    setIsSaving(true);
    
    try {
      const updatedCoupons = coupons.map(c => {
        if (c.id === couponId) {
          return { ...c, active: !c.active };
        }
        return c;
      });
      
      // Use couponSyncUtils to sync with coupons.json
      const success = await couponSyncUtils.syncCoupons(updatedCoupons);
      
      if (success) {
        // Update context
        updateCoupons(updatedCoupons);
        couponSyncUtils.notifyCouponUpdated(couponId);
      } else {
        throw new Error('Failed to toggle coupon active status');
      }
    } catch (error) {
      console.error('Error toggling coupon status:', error);
      alert('There was a problem updating the coupon. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-md p-6 mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">
        {isEditing ? 'Edit Coupon' : 'Create New Coupon'}
      </h3>
      
      <form onSubmit={handleSaveCoupon} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Coupon Code*
            </label>
            <div className="flex">
              <input
                type="text"
                name="code"
                value={formCoupon.code}
                onChange={handleInputChange}
                className="flex-grow px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              />
              <button 
                type="button"
                onClick={() => setFormCoupon(prev => ({ ...prev, code: generateRandomCode(6) }))}
                className="px-3 py-2 bg-gray-100 border border-l-0 border-gray-300 rounded-r-md hover:bg-gray-200"
                title="Generate random code"
              >
                <Clipboard size={16} />
              </button>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Title*
            </label>
            <input
              type="text"
              name="title"
              value={formCoupon.title}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Discount Type*
            </label>
            <select
              name="type"
              value={formCoupon.type}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="percentage">Percentage (%)</option>
              <option value="fixed">Fixed Amount</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {formCoupon.type === 'percentage' ? 'Discount (%)' : 'Discount Amount'}*
            </label>
            <input
              type="number"
              name="discount"
              value={formCoupon.discount}
              onChange={handleInputChange}
              min={0}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          
          {formCoupon.type === 'percentage' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Discount Amount (0 = unlimited)
              </label>
              <input
                type="number"
                name="maxDiscount"
                value={formCoupon.maxDiscount}
                onChange={handleInputChange}
                min={0}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          )}
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Valid Until
            </label>
            <input
              type="date"
              name="validUntil"
              value={formCoupon.validUntil}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea
              name="description"
              value={formCoupon.description}
              onChange={handleInputChange}
              rows={2}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Usage Limit (0 = unlimited)
            </label>
            <input
              type="number"
              name="usageLimit"
              value={formCoupon.usageLimit}
              onChange={handleInputChange}
              min={0}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        
        <div className="flex flex-wrap gap-4 mt-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              name="active"
              id="active"
              checked={formCoupon.active}
              onChange={handleCheckboxChange}
              className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
            />
            <label htmlFor="active" className="ml-2 text-sm text-gray-700">
              Active
            </label>
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="isVisible"
              id="isVisible"
              checked={formCoupon.isVisible}
              onChange={handleCheckboxChange}
              className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
            />
            <label htmlFor="isVisible" className="ml-2 text-sm text-gray-700">
              Visible to Customers
            </label>
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              name="adminRecommended"
              id="adminRecommended"
              checked={formCoupon.adminRecommended}
              onChange={handleCheckboxChange}
              className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
            />
            <label htmlFor="adminRecommended" className="ml-2 text-sm text-gray-700">
              Admin Recommended
            </label>
          </div>
        </div>
        
        <div className="flex justify-between mt-6">
          <button
            type="button"
            onClick={resetForm}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
          >
            Clear Form
          </button>
          
          <button
            type="submit"
            disabled={isSaving}
            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSaving ? 'Saving...' : isEditing ? 'Update Coupon' : 'Create Coupon'}
          </button>
        </div>
      </form>
      
      <div className="mt-8">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Existing Coupons</h3>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Code
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Title
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Discount
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Valid Until
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-3 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sortedCoupons.length === 0 ? (
                <tr>
                  <td colSpan={6} className="px-3 py-4 text-center text-sm text-gray-500">
                    No coupons found
                  </td>
                </tr>
              ) : (
                sortedCoupons.map(coupon => {
                  const isExpired = new Date(coupon.validUntil) < new Date();
                  
                  return (
                    <tr key={coupon.id}>
                      <td className="px-3 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center">
                          <Tag size={16} className="mr-2 text-gray-500" />
                          <span className="font-mono">{coupon.code}</span>
                          {coupon.adminRecommended && (
                            <span title="Admin Recommended"><Crown size={16} className="ml-2 text-amber-500" /></span>
                          )}
                        </div>
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-500">
                        {coupon.title}
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex items-center">
                          {coupon.type === 'percentage' ? (
                            <>
                              <Percent size={16} className="mr-2 text-green-500" />
                              {coupon.discount}%
                              {coupon.maxDiscount > 0 && (
                                <span className="ml-1 text-xs text-gray-400">
                                  (max ${coupon.maxDiscount})
                                </span>
                              )}
                            </>
                          ) : (
                            <>
                              <DollarSign size={16} className="mr-2 text-green-500" />
                              ${coupon.discount}
                            </>
                          )}
                        </div>
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex items-center">
                          <Calendar size={16} className="mr-2 text-blue-500" />
                          {typeof coupon.validUntil === 'string' 
                            ? new Date(coupon.validUntil).toLocaleDateString() 
                            : new Date(coupon.validUntil).toLocaleDateString()}
                          {isExpired && (
                            <span className="ml-2 px-2 py-0.5 text-xs bg-red-100 text-red-800 rounded">
                              Expired
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex items-center">
                          {coupon.active ? (
                            <span className="px-2 py-1 text-xs font-semibold bg-green-100 text-green-800 rounded-full flex items-center">
                              <CheckCircle size={14} className="mr-1" />
                              Active
                            </span>
                          ) : (
                            <span className="px-2 py-1 text-xs font-semibold bg-gray-100 text-gray-800 rounded-full">
                              Inactive
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-3 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => handleToggleActive(coupon.id)}
                            className={`p-1 rounded hover:bg-gray-100 ${
                              coupon.active ? 'text-green-600' : 'text-gray-500'
                            }`}
                            title={coupon.active ? 'Deactivate' : 'Activate'}
                            disabled={isSaving}
                          >
                            {coupon.active ? (
                              <CheckCircle size={16} />
                            ) : (
                              <Clock size={16} />
                            )}
                          </button>
                          <button
                            onClick={() => handleEditCoupon(coupon.id)}
                            className="p-1 rounded hover:bg-gray-100 text-blue-600"
                            title="Edit"
                            disabled={isSaving}
                          >
                            <Edit size={16} />
                          </button>
                          <button
                            onClick={() => handleDeleteCoupon(coupon.id)}
                            className="p-1 rounded hover:bg-gray-100 text-red-600"
                            title="Delete"
                            disabled={isSaving}
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default CreateCoupon;
