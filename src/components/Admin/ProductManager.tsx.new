import React, { useState } from 'react';
import { Edit, Plus, Trash2, Save, X } from 'lucide-react';
import { useProducts } from '../../context/ProductContext';
import { Product } from '../../types';
import { v4 as uuidv4 } from 'uuid';

const ProductManager: React.FC = () => {
  const { products, updateProduct } = useProducts();
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isAdding, setIsAdding] = useState(false);
  const [newProduct, setNewProduct] = useState<Partial<Product>>({
    id: '',
    name: '',
    category: 'bracelets',
    price: 0,
    originalPrice: 0,
    description: '',
    images: ['', ''],
    sizes: { 'S': { stock: 0, available: false } },
    featured: false,
    discount: 0
  } as Partial<Product>);

  const handleStockUpdate = (productId: string, size: string, newStock: number) => {
    const product = products.find(p => p.id === productId);
    if (product) {
      const updatedProduct = {
        ...product,
        sizes: {
          ...product.sizes,
          [size]: {
            ...product.sizes[size],
            stock: newStock,
            available: newStock > 0
          }
        }
      };
      updateProduct(updatedProduct);
    }
  };

  const handlePriceUpdate = (productId: string, newPrice: number) => {
    const product = products.find(p => p.id === productId);
    if (product) {
      updateProduct({ ...product, price: newPrice });
    }
  };

  const handleImageUpdate = (productId: string, imageIndex: number, newUrl: string) => {
    const product = products.find(p => p.id === productId);
    if (product) {
      const newImages = [...product.images];
      newImages[imageIndex] = newUrl;
      updateProduct({ ...product, images: newImages });
    }
  };

  const handleSaveProduct = () => {
    if (editingProduct) {
      updateProduct(editingProduct);
      setEditingProduct(null);
    }
  };

  const handleAddProduct = () => {
    const productToAdd = {
      ...newProduct,
      id: uuidv4(),
      featured: false,
      discount: Math.round(((newProduct.originalPrice || 0) - (newProduct.price || 0)) / (newProduct.originalPrice || 1) * 100)
    } as Product;
    
    updateProduct(productToAdd);
    setIsAdding(false);
    setNewProduct({
      id: '',
      name: '',
      category: 'bracelets',
      price: 0,
      originalPrice: 0,
      description: '',
      images: ['', ''],
      sizes: { 'S': { stock: 0, available: false } },
      featured: false,
      discount: 0
    });
  };

  const handleAddSize = (product: Product, newSize: string) => {
    if (!product.sizes[newSize]) {
      const updatedProduct = {
        ...product,
        sizes: {
          ...product.sizes,
          [newSize]: {
            stock: 0,
            available: false
          }
        }
      };
      if (product.id === editingProduct?.id) {
        setEditingProduct(updatedProduct);
      } else {
        updateProduct(updatedProduct);
      }
    }
  };

  const handleRemoveSize = (product: Product, sizeToRemove: string) => {
    const updatedSizes = { ...product.sizes };
    delete updatedSizes[sizeToRemove];
    
    const updatedProduct = {
      ...product,
      sizes: updatedSizes
    };
    
    if (product.id === editingProduct?.id) {
      setEditingProduct(updatedProduct);
    } else {
      updateProduct(updatedProduct);
    }
  };

  const handleAddImage = (product: Product) => {
    const updatedProduct = {
      ...product,
      images: [...product.images, '']
    };
    
    if (product.id === editingProduct?.id) {
      setEditingProduct(updatedProduct);
    } else {
      updateProduct(updatedProduct);
    }
  };

  const handleRemoveImage = (product: Product, index: number) => {
    if (product.images.length > 1) {
      const updatedImages = [...product.images];
      updatedImages.splice(index, 1);
      
      const updatedProduct = {
        ...product,
        images: updatedImages
      };
      
      if (product.id === editingProduct?.id) {
        setEditingProduct(updatedProduct);
      } else {
        updateProduct(updatedProduct);
      }
    }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Product Management</h2>
        <button
          onClick={() => setIsAdding(true)}
          className="flex items-center space-x-2 bg-yellow-500 text-black px-4 py-2 rounded-lg hover:bg-yellow-400 transition-colors"
        >
          <Plus className="h-5 w-5" />
          <span>Add Product</span>
        </button>
      </div>
      
      {isAdding && (
        <div className="mb-8 bg-white shadow-lg rounded-xl p-6 border-2 border-yellow-400">
          <div className="flex justify-between mb-4">
            <h3 className="text-xl font-bold">Add New Product</h3>
            <button onClick={() => setIsAdding(false)} className="text-gray-500 hover:text-gray-700">
              <X className="h-5 w-5" />
            </button>
          </div>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Product Name</label>
                <input
                  type="text"
                  value={newProduct.name}
                  onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select
                  value={newProduct.category}
                  onChange={(e) => setNewProduct({...newProduct, category: e.target.value as any})}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                >
                  <option value="bracelets">Bracelets</option>
                  <option value="rings">Rings</option>
                  <option value="necklaces">Necklaces</option>
                  <option value="earrings">Earrings</option>
                  <option value="keyrings">Keyrings</option>
                </select>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  value={newProduct.description}
                  onChange={(e) => setNewProduct({...newProduct, description: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                  rows={3}
                />
              </div>
            </div>
            
            <div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Current Price (₹)</label>
                <input
                  type="number"
                  value={newProduct.price}
                  onChange={(e) => setNewProduct({...newProduct, price: Number(e.target.value)})}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Original Price (₹)</label>
                <input
                  type="number"
                  value={newProduct.originalPrice}
                  onChange={(e) => setNewProduct({...newProduct, originalPrice: Number(e.target.value)})}
                  className="w-full p-2 border border-gray-300 rounded-lg"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Image URLs (One per line)</label>
                {newProduct.images?.map((image, index) => (
                  <div key={index} className="flex mb-2">
                    <input
                      type="text"
                      value={image}
                      onChange={(e) => {
                        const newImages = [...(newProduct.images || [])];
                        newImages[index] = e.target.value;
                        setNewProduct({...newProduct, images: newImages});
                      }}
                      className="flex-1 p-2 border border-gray-300 rounded-lg"
                      placeholder="Image URL"
                    />
                    <button 
                      onClick={() => {
                        if (newProduct.images && newProduct.images.length > 1) {
                          const newImages = [...newProduct.images];
                          newImages.splice(index, 1);
                          setNewProduct({...newProduct, images: newImages});
                        }
                      }}
                      className="ml-2 p-2 text-red-500 hover:bg-red-100 rounded-lg"
                    >
                      <X className="h-5 w-5" />
                    </button>
                  </div>
                ))}
                <button
                  onClick={() => setNewProduct({...newProduct, images: [...(newProduct.images || []), '']})}
                  className="text-blue-600 hover:text-blue-800 text-sm flex items-center mt-2"
                >
                  <Plus className="h-4 w-4 mr-1" /> Add Another Image
                </button>
              </div>
            </div>
          </div>
          
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">Sizes and Stock</label>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 mb-3">
              {Object.entries(newProduct.sizes || {}).map(([size, info]) => (
                <div key={size} className="bg-white p-3 rounded-lg border relative">
                  <button 
                    className="absolute top-1 right-1 text-red-500 hover:text-red-700"
                    onClick={() => {
                      const updatedSizes = {...newProduct.sizes};
                      delete updatedSizes[size];
                      setNewProduct({...newProduct, sizes: updatedSizes});
                    }}
                  >
                    <X className="h-4 w-4" />
                  </button>
                  <div className="text-sm font-medium text-gray-700 mb-2">Size {size}</div>
                  <input
                    type="number"
                    value={info.stock || 0}
                    onChange={(e) => {
                      const stock = parseInt(e.target.value) || 0;
                      setNewProduct({
                        ...newProduct,
                        sizes: {
                          ...(newProduct.sizes || {}),
                          [size]: {
                            stock,
                            available: stock > 0
                          }
                        }
                      });
                    }}
                    className="w-full p-2 border border-gray-300 rounded text-center text-sm"
                    placeholder="Stock"
                  />
                </div>
              ))}
              
              <button
                onClick={() => {
                  const newSize = prompt('Enter new size name:');
                  if (newSize && newProduct.sizes && !newProduct.sizes[newSize]) {
                    setNewProduct({
                      ...newProduct,
                      sizes: {
                        ...(newProduct.sizes || {}),
                        [newSize]: { stock: 0, available: false }
                      }
                    });
                  }
                }}
                className="flex items-center justify-center h-full min-h-[100px] border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50"
              >
                <Plus className="h-5 w-5 text-gray-400" />
              </button>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <button
              onClick={() => setIsAdding(false)}
              className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg mr-3 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={handleAddProduct}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center"
            >
              <Save className="h-5 w-5 mr-2" />
              Add Product
            </button>
          </div>
        </div>
      )}

      <div className="grid gap-6">
        {products.map(product => (
          <div key={product.id} className="bg-gray-50 rounded-xl p-6">
            {editingProduct && editingProduct.id === product.id ? (
              <div>
                <div className="flex items-start justify-between mb-4">
                  <div className="w-full">
                    <input
                      type="text"
                      value={editingProduct.name}
                      onChange={(e) => setEditingProduct({...editingProduct, name: e.target.value})}
                      className="text-xl font-bold text-gray-900 mb-2 p-2 w-full border border-gray-300 rounded-lg"
                    />
                    <select
                      value={editingProduct.category}
                      onChange={(e) => setEditingProduct({...editingProduct, category: e.target.value as any})}
                      className="p-2 border border-gray-300 rounded-lg"
                    >
                      <option value="bracelets">BRACELETS</option>
                      <option value="rings">RINGS</option>
                      <option value="necklaces">NECKLACES</option>
                      <option value="earrings">EARRINGS</option>
                      <option value="keyrings">KEYRINGS</option>
                    </select>
                  </div>
                  <div className="flex space-x-2 ml-4">
                    <button
                      onClick={handleSaveProduct}
                      className="p-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    >
                      <Save className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => setEditingProduct(null)}
                      className="p-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <div className="mb-4">
                      <label className="block font-semibold mb-3">Description</label>
                      <textarea
                        value={editingProduct.description}
                        onChange={(e) => setEditingProduct({...editingProduct, description: e.target.value})}
                        className="w-full p-2 border border-gray-300 rounded-lg"
                        rows={3}
                      />
                    </div>
                    
                    <div className="mb-4">
                      <label className="block font-semibold mb-3">Images</label>
                      {editingProduct.images.map((image, index) => (
                        <div key={index} className="flex mb-2">
                          <input
                            type="text"
                            value={image}
                            onChange={(e) => {
                              const newImages = [...editingProduct.images];
                              newImages[index] = e.target.value;
                              setEditingProduct({...editingProduct, images: newImages});
                            }}
                            className="flex-1 p-2 border border-gray-300 rounded-lg"
                            placeholder="Image URL"
                          />
                          <button 
                            onClick={() => handleRemoveImage(editingProduct, index)}
                            className="ml-2 p-2 text-red-500 hover:bg-red-100 rounded-lg"
                            disabled={editingProduct.images.length <= 1}
                          >
                            <X className="h-5 w-5" />
                          </button>
                        </div>
                      ))}
                      <button
                        onClick={() => handleAddImage(editingProduct)}
                        className="text-blue-600 hover:text-blue-800 text-sm flex items-center mt-2"
                      >
                        <Plus className="h-4 w-4 mr-1" /> Add Another Image
                      </button>
                    </div>
                  </div>
                  
                  <div>
                    <div className="mb-4">
                      <label className="block font-semibold mb-3">Pricing</label>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3">
                          <span className="text-sm text-gray-600 w-20">Current:</span>
                          <input
                            type="number"
                            value={editingProduct.price}
                            onChange={(e) => setEditingProduct({...editingProduct, price: parseInt(e.target.value) || 0})}
                            className="p-2 border border-gray-300 rounded-lg w-24"
                          />
                          <span className="text-sm text-gray-500">₹</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          <span className="text-sm text-gray-600 w-20">Original:</span>
                          <input
                            type="number"
                            value={editingProduct.originalPrice}
                            onChange={(e) => setEditingProduct({...editingProduct, originalPrice: parseInt(e.target.value) || 0})}
                            className="p-2 border border-gray-300 rounded-lg w-24"
                          />
                          <span className="text-sm text-gray-500">₹</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-3">
                        <label className="block font-semibold">Sizes and Stock</label>
                        <button
                          onClick={() => {
                            const newSize = prompt('Enter new size name:');
                            if (newSize && !editingProduct.sizes[newSize]) {
                              handleAddSize(editingProduct, newSize);
                            }
                          }}
                          className="text-blue-600 hover:text-blue-800 text-sm flex items-center"
                        >
                          <Plus className="h-4 w-4 mr-1" /> Add Size
                        </button>
                      </div>
                      <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                        {Object.entries(editingProduct.sizes).map(([size, sizeInfo]) => (
                          <div key={size} className="bg-white p-3 rounded-lg border relative">
                            <button 
                              className="absolute top-1 right-1 text-red-500 hover:text-red-700"
                              onClick={() => handleRemoveSize(editingProduct, size)}
                            >
                              <X className="h-4 w-4" />
                            </button>
                            <div className="text-sm font-medium text-gray-700 mb-2">Size {size}</div>
                            <input
                              type="number"
                              value={sizeInfo.stock}
                              onChange={(e) => {
                                const stock = parseInt(e.target.value) || 0;
                                setEditingProduct({
                                  ...editingProduct,
                                  sizes: {
                                    ...editingProduct.sizes,
                                    [size]: {
                                      stock,
                                      available: stock > 0
                                    }
                                  }
                                });
                              }}
                              className="w-full p-2 border border-gray-300 rounded text-center text-sm"
                            />
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div>
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">{product.name}</h3>
                    <p className="text-gray-600">{product.category.toUpperCase()}</p>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => setEditingProduct({...product})}
                      className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => {
                        if (confirm(`Are you sure you want to delete ${product.name}?`)) {
                          // Using the same updateProduct function to update the product list
                          updateProduct({ id: product.id, deleted: true } as any);
                          alert('Product deleted successfully');
                        }
                      }}
                      className="p-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <div className="mb-4">
                      <h4 className="font-semibold mb-3">Images</h4>
                      <div className="grid grid-cols-2 gap-3">
                        {product.images.map((image, index) => (
                          <div key={index} className="relative group">
                            <img
                              src={image}
                              alt={`${product.name} ${index + 1}`}
                              className="w-full h-24 object-cover rounded-lg"
                            />
                            <button
                              onClick={() => {
                                const newUrl = prompt('Enter new image URL:', image);
                                if (newUrl) handleImageUpdate(product.id, index, newUrl);
                              }}
                              className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity rounded-lg"
                            >
                              <Edit className="h-5 w-5 text-white" />
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-3">Pricing</h4>
                    <div className="space-y-3">
                      <div className="flex items-center space-x-3">
                        <span className="text-sm text-gray-600 w-20">Current:</span>
                        <input
                          type="number"
                          value={product.price}
                          onChange={(e) => handlePriceUpdate(product.id, parseInt(e.target.value))}
                          className="p-2 border border-gray-300 rounded-lg w-24"
                        />
                        <span className="text-sm text-gray-500">₹</span>
                      </div>
                      <div className="flex items-center space-x-3">
                        <span className="text-sm text-gray-600 w-20">Original:</span>
                        <span className="text-gray-500">₹{product.originalPrice}</span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h4 className="font-semibold mb-3">Stock Management</h4>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3">
                    {Object.entries(product.sizes).map(([size, sizeInfo]) => (
                      <div key={size} className="bg-white p-3 rounded-lg border">
                        <div className="text-sm font-medium text-gray-700 mb-2">Size {size}</div>
                        <input
                          type="number"
                          value={sizeInfo.stock}
                          onChange={(e) => handleStockUpdate(product.id, size, parseInt(e.target.value) || 0)}
                          className="w-full p-2 border border-gray-300 rounded text-center text-sm"
                        />
                        <div className={`text-xs mt-1 text-center ${
                          sizeInfo.available ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {sizeInfo.available ? 'In Stock' : 'Out of Stock'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default ProductManager;
