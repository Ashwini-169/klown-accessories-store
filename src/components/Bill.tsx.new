import React, { useState, useEffect } from 'react';
import { Receipt, Tag, Info, Clock } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { useProducts } from '../context/ProductContext';
import type { Coupon, Product } from '../types';

// Define props interface
interface BillProps {
  selectedCoupon: Coupon | null;
  onSelectCoupon: (coupon: Coupon | null) => void;
  recommendedCoupons: Coupon[];
}

// Bill component definition
const Bill: React.FC<BillProps> = ({ 
  selectedCoupon, 
  onSelectCoupon, 
  recommendedCoupons 
}) => {
  const { items, getTotalPrice } = useCart();
  const { products } = useProducts();
  const [subtotal, setSubtotal] = useState<number>(0);
  const [discount, setDiscount] = useState<number>(0);
  const [total, setTotal] = useState<number>(0);
  const [bestCoupon, setBestCoupon] = useState<Coupon | null>(null);
  const [orderId, setOrderId] = useState<string>("");

  // Generate a random order ID
  useEffect(() => {
    const randomId = Math.floor(100000 + Math.random() * 900000).toString();
    setOrderId(`ORD-${randomId}`);
  }, []);

  // Calculate subtotal, discount, and total
  useEffect(() => {
    const currentSubtotal = getTotalPrice();
    setSubtotal(currentSubtotal);

    // Find the best coupon (highest discount)
    let maxDiscount = 0;
    let bestCouponFound = null;

    if (recommendedCoupons.length > 0) {
      recommendedCoupons.forEach(coupon => {
        let currentDiscount = 0;

        if (coupon.type === 'percentage' && coupon.minAmount !== undefined && currentSubtotal >= coupon.minAmount) {
          currentDiscount = Math.min(
            (currentSubtotal * coupon.discount) / 100, 
            coupon.maxDiscount || Number.MAX_VALUE
          );
        } else if (coupon.type === 'fixed' && coupon.minAmount !== undefined && currentSubtotal >= coupon.minAmount) {
          currentDiscount = Math.min(
            coupon.discount, 
            coupon.maxDiscount || Number.MAX_VALUE
          );
        } else if (coupon.type === 'special' && coupon.specialType === 'buyXgetY') {
          // For buyXgetY, calculate the value of free items
          if (items.length >= (coupon.buyQuantity || 0)) {
            // Sort items by price to find lowest-priced items
            const sortedItems = [...items].sort((a, b) => a.price - b.price);
            const freeItemsCount = Math.min(
              coupon.getQuantity || 0,
              Math.floor(items.length / (coupon.buyQuantity || 1)) * (coupon.getQuantity || 0)
            );
            
            // Sum the prices of the free items (lowest priced items)
            for (let i = 0; i < freeItemsCount && i < sortedItems.length; i++) {
              currentDiscount += sortedItems[i].price * sortedItems[i].quantity;
            }
          }
        }

        if (currentDiscount > maxDiscount) {
          maxDiscount = currentDiscount;
          bestCouponFound = coupon;
        }
      });

      setBestCoupon(bestCouponFound);
    } else {
      setBestCoupon(null);
    }

    // Calculate the actual discount based on selected coupon
    let calculatedDiscount = 0;
    
    if (selectedCoupon) {
      if (selectedCoupon.type === 'percentage' && selectedCoupon.minAmount !== undefined && currentSubtotal >= selectedCoupon.minAmount) {
        calculatedDiscount = Math.min(
          (currentSubtotal * selectedCoupon.discount) / 100, 
          selectedCoupon.maxDiscount || Number.MAX_VALUE
        );
      } else if (selectedCoupon.type === 'fixed' && selectedCoupon.minAmount !== undefined && currentSubtotal >= selectedCoupon.minAmount) {
        calculatedDiscount = Math.min(
          selectedCoupon.discount, 
          selectedCoupon.maxDiscount || Number.MAX_VALUE
        );
      } else if (selectedCoupon.type === 'special' && selectedCoupon.specialType === 'buyXgetY') {
        if (items.length >= (selectedCoupon.buyQuantity || 0)) {
          // Sort items by price to find lowest-priced items
          const sortedItems = [...items].sort((a, b) => a.price - b.price);
          const freeItemsCount = Math.min(
            selectedCoupon.getQuantity || 0,
            Math.floor(items.length / (selectedCoupon.buyQuantity || 1)) * (selectedCoupon.getQuantity || 0)
          );
          
          // Sum the prices of the free items (lowest priced items)
          for (let i = 0; i < freeItemsCount && i < sortedItems.length; i++) {
            calculatedDiscount += sortedItems[i].price * sortedItems[i].quantity;
          }
        }
      }
    }

    setDiscount(calculatedDiscount);
    setTotal(currentSubtotal - calculatedDiscount);
  }, [items, getTotalPrice, selectedCoupon, recommendedCoupons]);

  // Handle applying the best coupon
  const handleApplyBestCoupon = () => {
    if (bestCoupon && (!selectedCoupon || bestCoupon.id !== selectedCoupon.id)) {
      onSelectCoupon(bestCoupon);
    }
  };

  // Handle removing the coupon
  const handleRemoveCoupon = () => {
    onSelectCoupon(null);
  };

  // Find the product name
  const getProductName = (productId: string) => {
    const product = products.find((p: Product) => p.id === productId);
    return product ? product.name : 'Product';
  };

  return (
    <div className="bg-white rounded-lg border shadow-sm overflow-hidden">
      {/* Order Info Header */}
      <div className="bg-gray-50 p-3 border-b">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Receipt className="h-4 w-4 mr-2 text-gray-700" />
            <h2 className="font-semibold text-gray-800">Order Summary</h2>
          </div>
          <div className="flex items-center text-xs text-gray-500">
            <Clock className="h-3 w-3 mr-1" />
            <span>{orderId}</span>
          </div>
        </div>
      </div>
      
      {/* Items Table */}
      <div className="p-2 overflow-x-auto">
        <table className="w-full text-xs sm:text-sm">
          <thead className="bg-gray-50 text-gray-600">
            <tr>
              <th className="px-2 py-1 text-left">Item</th>
              <th className="px-2 py-1 text-center">Qty</th>
              <th className="px-2 py-1 text-right">Price</th>
            </tr>
          </thead>
          <tbody>
            {items.map((item, index) => (
              <tr key={`${item.productId}-${item.size}-${index}`} className="border-b border-gray-100">
                <td className="px-2 py-1.5">
                  <div className="truncate max-w-[120px]">
                    {getProductName(item.productId)}
                    <span className="text-xs text-gray-500 ml-1">({item.size})</span>
                  </div>
                </td>
                <td className="px-2 py-1.5 text-center">{item.quantity}</td>
                <td className="px-2 py-1.5 text-right">₹{(item.price * item.quantity).toFixed(0)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Totals */}
      <div className="p-3 border-t bg-gray-50">
        <div className="space-y-1 text-sm">
          <div className="flex justify-between">
            <span className="text-gray-600">Subtotal</span>
            <span>₹{subtotal.toFixed(0)}</span>
          </div>
          
          {discount > 0 && (
            <div className="flex justify-between text-green-600">
              <span>Discount</span>
              <span>-₹{discount.toFixed(0)}</span>
            </div>
          )}
          
          <div className="flex justify-between font-semibold text-base border-t pt-1.5 mt-1.5">
            <span>Total</span>
            <span>₹{total.toFixed(0)}</span>
          </div>
        </div>
      </div>
      
      {/* Coupon Section */}
      <div className="p-3 border-t">
        {selectedCoupon ? (
          <div className="bg-yellow-50 p-2 rounded-md border border-yellow-200 text-xs">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Tag className="h-3.5 w-3.5 text-yellow-600 mr-1.5" />
                <span className="font-medium">Applied: {selectedCoupon.code}</span>
              </div>
              <button 
                onClick={handleRemoveCoupon}
                className="text-xs text-red-500 hover:text-red-700 px-1"
              >
                Remove
              </button>
            </div>
            <p className="text-xs text-gray-600 mt-1 line-clamp-1">{selectedCoupon.description}</p>
          </div>
        ) : bestCoupon ? (
          <div className="bg-blue-50 p-2 rounded-md border border-blue-200 text-xs">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Info className="h-3.5 w-3.5 text-blue-600 mr-1.5" />
                <span className="font-medium">Best Deal: {bestCoupon.code}</span>
              </div>
              <button 
                onClick={handleApplyBestCoupon}
                className="px-2 py-0.5 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
              >
                Apply
              </button>
            </div>
            <div className="flex justify-between mt-1">
              <p className="text-xs text-gray-600 line-clamp-1">{bestCoupon.description}</p>
              <p className="text-xs text-green-600 font-medium whitespace-nowrap ml-1">Save ₹{(Math.min(
                bestCoupon.type === 'percentage' ? (subtotal * bestCoupon.discount) / 100 : bestCoupon.discount,
                bestCoupon.maxDiscount || Number.MAX_VALUE
              )).toFixed(0)}</p>
            </div>
          </div>
        ) : null}
        
        <div className="flex items-center justify-center mt-3">
          {/* Removed the Proceed to Checkout button as per the change request */}
        </div>
      </div>
    </div>
  );
};

export default Bill;
